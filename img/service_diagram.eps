%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 790 560
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 790 560
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: VACOLG+HelveticaNeue
%!FontType1-1.0: VACOLG+HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /VACOLG+HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /afii10028 put
dup 34 /afii10077 put
dup 35 /afii10074 put
dup 36 /afii10070 put
dup 37 /afii10079 put
dup 38 /afii10084 put
dup 39 /afii10033 put
dup 40 /afii10082 put
dup 41 /afii10080 put
dup 42 /afii10072 put
dup 43 /afii10018 put
dup 44 /afii10065 put
dup 45 /afii10073 put
dup 46 /space put
dup 47 /afii10069 put
dup 48 /afii10093 put
dup 49 /afii10087 put
dup 50 /afii10019 put
dup 51 /afii10085 put
dup 52 /afii10075 put
dup 53 /afii10083 put
dup 54 /afii10067 put
dup 55 /afii10090 put
dup 56 /A put
dup 57 /P put
dup 58 /I put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70002FFFA0000029002CA0003000B002500B800042FB800052FB800092FBA0000000700032BB8000010BA00020005000411123930311B0133130301333721173301C9790277ABFEEA6150012E4E69FEE90127014DFEB301A3FD36D7D702CA000000010052000000B102CA00030017BA0003000000032BB800031000B800012FB800002F303113113311525F02CAFD3602CA0000000002004E0000026202CA000800130089B800152FBA0001000900032BB8000110B8001510B80010DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8000110B8000BD000B8000A2FBA0009000100032BB8000910BA0000000C00032BB800001030311311333216151406270111331133163635342623ADBA514B4B51FEE75FDA6C6F6F6C0174010643404044010156FD360124017064646F000002004E0000027602CA000C00130091B8000A2BB800142FB800152FB8001410B80000D0B800002FB80003DCB8001510B80008DCB8000FDC410500DA000F00EA000F00025D411B0009000F0019000F0029000F0039000F0049000F0059000F0069000F0079000F0089000F0099000F00A9000F00B9000F00C9000F000D5DB8000310B80012D000BA000D000B000D2BBA00010002000D2BBA00050011000D2B303113211521153332161514062321253235342B01114E01E9FE76EE6A71716AFEB3012E9C9CCF02CA50D26E67666D508385FEF8000003004E0000028002CA00160021002C00A5B8000A2BBA002B0000000D2BBA00090025000D2BB8000910B8001ADCB80010DCBA000D00000010111239B8002B10B80020D0410500DA002500EA002500025D411B000900250019002500





00>] def
/CharStrings 28 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/I 3 def
/P 4 def
/afii10018 5 def
/afii10019 6 def
/afii10028 7 def
/afii10033 8 def
/afii10065 9 def
/afii10067 10 def
/afii10069 11 def
/afii10070 12 def
/afii10072 13 def
/afii10073 14 def
/afii10074 15 def
/afii10075 16 def
/afii10077 17 def
/afii10079 18 def
/afii10080 19 def
/afii10082 20 def
/afii10083 21 def
/afii10084 22 def
/afii10085 23 def
/afii10087 24 def
/afii10090 25 def
/afii10093 26 def
/uni2B91 27 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926AE0E2EF20EAFDBFC5FC1E83BEF5713FF899F5A98AA12E11EE8D7354F595CC6D37173434FCBC249E6FDA96A366A295C828D390FABFE64C7E9F699B5405A2C872384A63279AB008EB4A93D53383E434DD1AABA94DA73A38370A3E40A5A01425793A14D16791BB8C7637933E04993FB7CCB9D7AF8EA3595040F541DB2390B64F8895737B5AD598411F84108B0A74F5F123F4B4365C1CAD2155A1774B0DEF32720DBB166EB6CF5C2EEA89066FD2EEC5B92EE23D5F16A4F9F3FC2E737527706B26AB1B5BD75DC79FCA3FC18454BB2018024E9A8CF5B5C949C76BD9C185A81FEF3000268B7E62C9129368653817C19A3D0664B474F8D79A3FDD98DF0383BB3A9AE1D5629D091AFF32B4941E47A6C907DDE0FB2EAA440BCE94AF58B803ECAB1EA39E952CAC55D5A523AC2712E02336BDC52642CE9D0416C370A84565107B10E34B4D12904AD9D3B04E33535715C9A4CDAC20369888B0FDC9EAE3547CF873E4D678D2A7B630436E8691A0C82AD9EF863B4F86AC14AAFD9CE8C8FD90760F1E3E4D131630CA8BB2E45792AB88B1007064115ED59D4F2AC65B53632C57ADF5869DE0B1B7BA0E85597688EA4BFF9414B88C92609A2C7FD9A365F986869F65D361FC5F296AF9D7E4CD26F8C86DB87975024A5CF67C71E564E9B2E942EA3DA6A6B2B185BD45BA753AA936076E8E4DBF486CDDF2AD2543E6177D41772F8AE02211F0B2D763D4467AA853C9CE39A27E2C74D24ADDB00B7F130782A589DF544BE741938C253BB338
4AD2F9DDE1B8D5F8C9B4707450CC529CA774FC93BD79755DE7C5288C38D33AF032DE8AA8513888DA469EC394C414D4689B315EF248F436B5053BDBC682D7A14B764F77DBF011325EC81A977AFF6582A81A296EE6C892C5F28689C5C99635663879099111665A0FE8B66D5B0691BE3785900A5505F754B6967FEE40575FBDE03181857D68F62BAA078DC8C2872EF9670914CA930BA14D8D81DC8512D57E0A45E9B6E5C8796E4E5FF3D61A66B3EB04411079DA74860EC1B5942B190379BA28BE5F7952F71A3828AEA00527D557589F747A651E8B67EE21FFA884F836F33B456D63B42B69615C04068DAEAF01C93E5FD82679C6567B73F880D57D3746C226A2D74E464498CCA06569FBD5245E11405A13B318F070DAD56B170FD45A5AEBDFCF9F77337084912B5F09155138E0496DDDF3401FB97B6F8C508863B5E29C32086D21CBDB76BBA63DA70A6F0CBE686A93251E79C55289098500E9822B02FF2BFAEDB9DA49808BC0FED574DDC098883B86D1ED973D5F485CB58BCAC7AD1FA95B7CAAD71B84756120AABA5B2117E9357B6403350934A86BE2BCFA7BB82EF82E2CF657B74246F114DDD19B6E7409044A951A5F37DEF9E55B124F00D9DC19B592B211C290321A163A1A7AB9CD69A022619DF1F82CF21D45920385870065869ECF5AF6C4EA31249E5CCC001C2DEDD38E4EC3995335CF1464BBB4AE4FCF0E2E679C0D1FAC463608137B959F917170B285BC5EFACB7B5C57619EE0B63C5016397B14289B0BC009FFA3257B053E2B86415B52222F52B09151915AC942EA87801DEAC240CAA81D63AACBC2974CA1F6BFAEE4DF4138DDA057E2BAACBDD450D575A213C9FDDB09B41B7CEAB0C0FB773FA9A319884064D9D21F7ADC581FD0AE52C62FA233B926C740B6ED28E27FB666ABCC4F079F89046569E1C675ECA0D5CAE76963AF44B9424613A5769C8B9C8456B8EE3AAB61DB3825276C329D09956A279E7F74198251FBE151A30C80551DDCECAA1C3A9C82B716D232CA2F776027A56162854D0ECA9604E5EB63053A4D6D46897B046C42D0697214058BC8CAD733729F642D2948A4E62D5CF9FB93F497450D0A03E4D61C0DFD6EA24A4EC5133CEDD917687BCFFBFE8B9C4F5CEF206097DEA016648B76336C6E07D3A91E9D93EC042F3FB2AD188FBD8ACCD3376D7FFBF9E20BCABFF42EA16E0000E6C75100E656C8CB092BDA54F8F40B15039204E846F781216D5D93EA4FFFAE72ABB9094354B9E389FCBDCAD48A6ABAC1E51E833D9141C84BC4E6F2E2871BAE98D73A5F5FB05B6AA74587B749A6D2C059E0E537AB3A8F18747FEEECE4220BE2B14FB588F9F24CAB4C53C297A633801A76747BE92D78362E01D8DD54E0C70408D78989C3695E0F98911B37B015F1B16E43FA64FCF5B0323DD6AD511729B70D1409BEB18D9F04FF9E2EA7D5961D9CFD48D23607A6
D026B26AE05130ABD08C6211D3A77FDDFD4CD2412BF7424846B06CD4F2A8EF81747ACC9912357919506232073375A940AB933D0F2CE1D7E7901407AA8EE6C082765CE7A7AC37034FAB0F2040D1CD441DEA372E05D30B6AB94F74BFDA2AFBA36F807E27CA0F1B85081341FF4ABBA5B36C7B8813FF9EF5841020375FF88CED2E7A386E64E392A98961AF1D74BA4D21DC461833D5BC9EC3AE0F2F1B0789DDB733F70131E29A3B268EB42BC69C21EB4363BFAF6523B9FD0725BCFFE22DA683B88C711EEA9AAB9CB91028D9CE6C35511AD47AC4E60BF2260DA28A22B34E9E60CD02AA6342B9DB5EF4772B70ADC0E35564475FB078B4A45C6E40BFECFBA3D22E7DA70DC071892413A91720C49C9A79584F214E2F22EC8396EAAD03CF244946E75672D1817AA8D63BA10B68285E0D12ADF7DBAC1F9BB990D77BB241648AFE6174A2F1789F18344B568605613082DFE2E3A7A8980CE133BEB35E432AB4AC8AEA19872082DB2ADCFC1AC8E9E0E637331DA994CAB8304C1877FC35BABEE8F2B21062DEB2E4AA8872574C0E5EA8645DC404DA391E7919EF0370259EE46A0C7294A1715E2F3C496E64981DE726688EE49A00A7DE5C6815377ADC6B071EE44D33C3FC31E0C06F2DD7AE537830ACAAF9FF9E884C260754DA469729A0E5872BE28C31CE194B7A5B6EFBAE03772C2F611E38AEDB8A0E7D22525789E5DDE98CCC0A616FE69DC718918511EA58A6699D355D79DA241BCD29BB30DDEB24F6A71FAB973B909B712543BE88B2A25A20D7F7B5A010829C1867739BF0BABF522193D4B046F5CDFEA10D85E9DD3002E4902829006606A80ECF36C367516FA6E89ED4A5AB1A7BB5D5F333590E4CC299881C2041A460CDAD1C6EACB8DB22F37405795BF81B068C155A240BA97849F180281B8955D636BB553C5690E5FBC7163EFB0A2CA166494FCCF47B6BAD6F7F8ED5BF9D2C55A074B88A5C1396F07EE599556FBD6D7C0CBA5328A385747FEC0B4B10A573906E361C4FCCD2A805D85885C61DEB201750CD15E8FCF10C541FCCC6166DBF79D8E13650F868653481E6829E14849ACADFECBBCE0881222D522CDD86DDEEAF26660B839FD268DC19AAFB5BBB8C9A5A1463589FF4D9884410133382176B20C5824D4F94D4DDDE9B9180669094EE75EAD23BC5BA82EADB493833F442912867D5EF4FDF47213B6C75AA0C0FC9FDD2A9A49F0B8EB0C7514976EC3BFC2D582A566C6B2B3E21AD65E1279CD796574B4652CD7707EA523487984A2A3FB69FBD8F9318F30FF975161BFB9B9ADF129B4ED78104FC0077F54909ADBF07828CF475067596B9B076B8B54F37B41DBBE8C17C14439295218C788FBE5746DD534B5F90472FE8AE90E78D92F9D6090A93FFC376D71035D604250C62FE9102DB826651D380633A140592254C9AA7CAD0497F1E31D20519E1C4A26357A466708036C1F8

17F74F0F31732A03E72CDAEEF8028B43F9E9C645B48031CEB56D369F551EF872C602925B6DAF57AD3F3AF4554FC5104163CFB7477B19DB8C30B14341F8C625175F3F099892CAB1EF8F139CDBAC860B83FEBF42D956CC9F7606830F250609193F294D9480424F3B6979DEF78CFEC8790728D074ECD12388A498BD8797A95F7C9C1E4DE0F3B4B5AAF4B85C04B02D6A2D157C5D2FD5AFD010F23AED0118BD5D60F7029168AE91D15859C39AC1AF2E62682BE56CFAF653AC42A5AE528BA3BE55BA3B9EA3C0E4F63C6C30830795E7D57E14CCF3F34E0F6F996B1BD7C43E3F4D9A21A89E08FC37FAC37C8D1CF010F9D86E5FB2F08B5F09359634BEA267EDBF34016DD7168F51FB4B697131DE7047DADB73DCD7C12B12723DC46C5568DEB67044BACA4F4FA2E35646EC02E6A00A976B2368B560B8B47F82375C2E5BB82C2845753768C0B046D6FB3200C54DDEB9569490
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/VACOLG+HelveticaNeue cguidfix
/F1.1/VACOLG+HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
281 282.75 m
272 287.25 l
272 278.25 l
281 282.75 l
h
170.5 282.25 m
272.5 282.25 l
273 282.25 l
273 283.25 l
272.5 283.25 l
170.5 283.25 l
170 283.25 l
170 282.25 l
170.5 282.25 l
h
W
0 0 790 560 rc
165 292.25 m
286 292.25 l
286 273.25 l
165 273.25 l
h
f
Q
q
170 282.75 m
179 278.25 l
179 287.25 l
170 282.75 l
h
280.5 283.25 m
178.5 283.25 l
178 283.25 l
178 282.25 l
178.5 282.25 l
280.5 282.25 l
281 282.25 l
281 283.25 l
280.5 283.25 l
h
W
0 0 790 560 rc
165 292.25 m
286 292.25 l
286 273.25 l
165 273.25 l
h
f
Q
q
572 280.75 m
563 285.25 l
563 276.25 l
572 280.75 l
h
461.5 280.25 m
563.5 280.25 l
564 280.25 l
564 281.25 l
563.5 281.25 l
461.5 281.25 l
461 281.25 l
461 280.25 l
461.5 280.25 l
h
W
0 0 790 560 rc
456 290.25 m
577 290.25 l
577 271.25 l
456 271.25 l
h
f
Q
q
461 280.75 m
470 276.25 l
470 285.25 l
461 280.75 l
h
571.5 281.25 m
469.5 281.25 l
469 281.25 l
469 280.25 l
469.5 280.25 l
571.5 280.25 l
572 280.25 l
572 281.25 l
571.5 281.25 l
h
W
0 0 790 560 rc
456 290.25 m
577 290.25 l
577 271.25 l
456 271.25 l
h
f
Q
q
571.74976 133.33626 m
567.42816 142.42326 l
561.88721 135.33116 l
571.74976 133.33626 l
h
461.26859 219.01913 m
564.74384 138.17538 l
565.13788 137.86755 l
565.75354 138.65556 l
565.3595 138.96339 l
461.88425 219.80714 l
461.49023 220.11497 l
460.87457 219.32697 l
461.26859 219.01913 l
h
W
0 0 790 560 rc
463.09113 230.28539 m
581.53864 137.74406 l
569.84106 122.77185 l
451.39355 215.31317 l
h
f
Q
q
461.1824 219.72096 m
465.50403 210.63397 l
471.04498 217.72606 l
461.1824 219.72096 l
h
571.66364 134.0381 m
468.18832 214.88185 l
467.79431 215.18968 l
467.17865 214.40167 l
467.57266 214.09384 l
571.04797 133.25009 l
571.44196 132.94226 l
572.05762 133.73027 l
571.66364 134.0381 l
h
W
0 0 790 560 rc
463.09113 230.28539 m
581.53864 137.74406 l
569.84106 122.77185 l
451.39355 215.31317 l
h
f
Q
q
460.59106 341.72055 m
464.91269 350.80756 l
470.45364 343.71545 l
460.59106 341.72055 l
h
571.07227 427.40341 m
467.59698 346.55966 l
467.20297 346.25183 l
466.58731 347.03986 l
466.98132 347.34769 l
570.4566 428.19144 l
570.85059 428.49927 l
571.46625 427.71124 l
571.07227 427.40341 l
h
W
0 0 790 560 rc
569.24969 438.66968 m
450.80222 346.12836 l
462.49979 331.15613 l
580.94727 423.69745 l
h
f
Q
q
571.15845 428.10526 m
566.83679 419.01825 l
561.29584 426.11035 l
571.15845 428.10526 l
h
460.67725 342.42239 m
564.15253 423.26614 l
564.54651 423.57397 l
565.16217 422.78595 l
564.76819 422.47812 l
461.29291 341.63437 l
460.8989 341.32654 l
460.28323 342.11456 l
460.67725 342.42239 l
h
W
0 0 790 560 rc
569.24969 438.66968 m
450.80222 346.12836 l
462.49979 331.15613 l
580.94727 423.69745 l
h
f
Q
0.847 0.847 0.847 sc
q
85.5 220 m
132.16806 220 170 248.20605 170 283 c
170 317.79395 132.16806 346 85.5 346 c
38.83194 346 1 317.79395 1 283 c
1 248.20605 38.83194 220 85.5 220 c
h
W*
0 0 790 560 rc
-4 351 m
175 351 l
175 215 l
-4 215 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 790 560 rc
1 0 0 -1 1 346 cm
84.5 126 m
131.16806 126 169 97.793938 169 63 c
169 28.20606 131.16806 0 84.5 0 c
37.83194 0 0 28.20606 0 63 c
0 97.793938 37.83194 126 84.5 126 c
h
S
Q
0 0 0 sc
q
1 220 169 126 rc
1 0 0 -1 1 346 cm
/F1.1[ 24 0 0 -24 0 0]sf
44.228001 72 m
(!"#$%&)[ 16.008000 13.512000 13.584000 12.888000 13.440000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
260.5 360.5 m
481.5 360.5 l
481.5 199.5 l
260.5 199.5 l
h
289 339.5 m
453 339.5 l
457.14215 339.5 460.5 336.14215 460.5 332 c
460.5 228 l
460.5 223.85786 457.14215 220.5 453 220.5 c
289 220.5 l
284.85785 220.5 281.5 223.85786 281.5 228 c
281.5 332 l
281.5 336.14215 284.85785 339.5 289 339.5 c
h
289 340.5 m
284.30557 340.5 280.5 336.69443 280.5 332 c
280.5 228 l
280.5 223.30557 284.30557 219.5 289 219.5 c
453 219.5 l
457.69443 219.5 461.5 223.30557 461.5 228 c
461.5 332 l
461.5 336.69443 457.69443 340.5 453 340.5 c
289 340.5 l
h
W*
289 340 m
453 340 l
457.41827 340 461 336.41827 461 332 c
461 228 l
461 223.58173 457.41827 220 453 220 c
289 220 l
284.58173 220 281 223.58173 281 228 c
281 332 l
281 336.41827 284.58173 340 289 340 c
h
W*
0 0 790 560 rc
289 340 m
453 340 l
457.41827 340 461 336.41827 461 332 c
461 228 l
461 223.58173 457.41827 220 453 220 c
289 220 l
284.58173 220 281 223.58173 281 228 c
281 332 l
281 336.41827 284.58173 340 289 340 c
h
f
Q
2 w
0.59200001 0.59200001 0.59200001 sc
q
289 340 m
453 340 l
457.41827 340 461 336.41827 461 332 c
461 228 l
461 223.58173 457.41827 220 453 220 c
289 220 l
284.58173 220 281 223.58173 281 228 c
281 332 l
281 336.41827 284.58173 340 289 340 c
h
W*
0 0 790 560 rc
1 0 0 -1 281 340 cm
8 0 m
172 0 l
176.41827 0 180 3.581722 180 8 c
180 112 l
180 116.41828 176.41827 120 172 120 c
8 120 l
3.581722 120 0 116.41828 0 112 c
0 8 l
0 3.581722 3.581722 0 8 0 c
h
S
Q
0 0 0 sc
q
281 220 180 120 rc
1 0 0 -1 281 340 cm
/F1.1[ 24 0 0 -24 0 0]sf
18.108 69 m
('\(#"\)*$%#$)[ 17.088000 14.232000 13.584000 13.512000 13.776000 18.792000 12.888000 13.440000 13.584000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
572 560 m
790 560 l
790 429 l
572 429 l
572 560 l
h
W*
0 0 790 560 rc
572 560 m
790 560 l
790 429 l
572 429 l
572 560 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
572 560 m
790 560 l
790 429 l
572 429 l
572 560 l
h
W*
0 0 790 560 rc
1 0 0 -1 572 560 cm
0 0 m
218 0 l
218 131 l
0 131 l
0 0 l
h
S
Q
0 0 0 sc
q
572 428 218 131 rc
1 0 0 -1 572 559 cm
/F1.1[ 24 0 0 -24 0 0]sf
36.939999 74 m
(+,-,./,%%01)[ 16.200000 12.888000 12.144000 12.888000 6.672000 14.136000 12.888000 13.440000 13.440000 16.992000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
572 346 m
790 346 l
790 215 l
572 215 l
572 346 l
h
W*
0 0 790 560 rc
572 346 m
790 346 l
790 215 l
572 215 l
572 346 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
572 346 m
790 346 l
790 215 l
572 215 l
572 346 l
h
W*
0 0 790 560 rc
1 0 0 -1 572 346 cm
0 0 m
218 0 l
218 131 l
0 131 l
0 0 l
h
S
Q
0 0 0 sc
q
572 214 218 131 rc
1 0 0 -1 572 345 cm
/F1.1[ 24 0 0 -24 0 0]sf
41.919998 60 m
(2%3&\($%%#4.)[ 16.440000 13.440000 12.000000 11.112000 14.232000 12.888000 13.440000 13.440000 13.584000 13.584000 0.000000 ] xS
69.279999 88 m
(5$\(6#5)[ 12.888000 12.888000 14.232000 12.960000 13.584000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
W*
0 0 790 560 rc
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
W*
0 0 790 560 rc
1 0 0 -1 572 132 cm
0 0 m
218 0 l
218 131 l
0 131 l
0 0 l
h
S
Q
0 0 0 sc
q
572 0 218 131 rc
1 0 0 -1 572 131 cm
/F1.1[ 24 0 0 -24 0 0]sf
58.779999 60 m
(2%$7%$$)[ 16.440000 13.440000 12.888000 18.456000 13.440000 12.888000 0.000000 ] xS
90.339996 88 m
(89:)[ 15.552000 15.552000 0.000000 ] xS
ep
end
