%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 790 132
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 790 132
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KTKQLO+HelveticaNeue
%!FontType1-1.0: KTKQLO+HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /KTKQLO+HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /afii10028 put
dup 34 /afii10077 put
dup 35 /afii10074 put
dup 36 /afii10070 put
dup 37 /afii10079 put
dup 38 /afii10084 put
dup 39 /afii10033 put
dup 40 /afii10082 put
dup 41 /afii10080 put
dup 42 /afii10072 put
dup 43 /G put
dup 44 /o put
dup 45 /C put
dup 46 /l put
dup 47 /w put
dup 48 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



014558B800042F1BB9000400083E59B800014558B800072F1BB9000700083E59B800014558B8000A2F1BB9000A00043E59B800014558B8000E2F1BB9000E00043E59B800014558B800122F1BB9001200043E59BA0003000A0001111239BA0006000A000111123930311327331735331537330713232707152335270723FADD69D755D769DEFB69D71D5521D3690115F0F0F0F0F0F0FEEBE71ACDCD1EEB00000000010040000001F602050009004FB8000A2BB8000A2FB8000B2FB8000A10B80000D0B800002FB80001DCB8000B10B80005DCB80006DC00B800002FB800032FB800052FB800082FBA000200050000111239BA0007000500001112393031133311133311231103234055F46D55F46D0205FE5A01A6FDFB01A6FE5A00000001000AFFFA01F30205001500CBB800142BB800162FB8000F2FB8001610B8000CD0B8000C2FB8000F10B9000E0003F4B8000C10B900110003F4B8000E10B80017DC00B800014558B8000C2F1BB9000C00083E59B800014558B800002F1BB9000000043E59B800014558B800032F1BB9000300043E59B800014558B8000E2F1BB9000E00043E59BA00040000000C111239B8000010B900070002F44111000700070017000700270007003700070047000700570007006700070077000700085D4105008600070096000700025DB8000C10B900100002F4303117222627351E0133323E023721112311230E033C0D1C090A11082123110402016B55C403071C3E0605024B0302346CA975FDFB01BA5BA37A48000000010040000001F00205000B004FB8000A2BB8000C2FB8000D2FB8000C10B80000D0B800002FB80001DCB8000D10B80005DCB80004DCB80007D0B8000110B80009D000B800002FB800042FB800062FB8000A2FBA00030008000D2B3031133315213533112335211523405501065555FEFA550205CECEFDFBEEEE000000020024FFF5021A02110013002700CBB8000A2BB800282FB800292FB8002810B80005D0B800052FB8002910B8000FDCB80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8000510B80023DC411B0006002300160023002600230036002300460023005600230066002300760023008600230096002300A6002300B6002300C60023000D5D410500D5002300E5002300025D00BA00140000000D2BBA000A001E000D2B303105222E0235343E0233321E0215140E0227323E0235342E0223220E0215141E02011F3E5D402020405D3E3D5E402020405E3D213B2C19192C3B21213B2C19192C3B0B294962393963492A2A496339396249294A1A31492F2F49321A1A32492F2F49311A000000020043FF3B022D02110018002C00B1B8000A2B

00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/C 1 def
/G 2 def
/l 3 def
/n 4 def
/o 5 def
/w 6 def
/afii10028 7 def
/afii10033 8 def
/afii10070 9 def
/afii10072 10 def
/afii10074 11 def
/afii10077 12 def
/afii10079 13 def
/afii10080 14 def
/afii10082 15 def
/afii10084 16 def
/uni2B91 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec

1409EEDDD968A1228BB91F4FBEA8D9F246217496AA68DBD9D6BB9C3DC7C4AA08B964D14DF62FEB00E5D400B437A8835DA1DDC795933889DA5E88C0C894406C595998942E072C079D20B4DD30F100B1F6673ABA7860746817E6D04EF9EB145F21E165E06193D7272D42F8A3D4BCA28B504294E2FBA00BB39E8BB1ECFDC72E9AFBE8B4C7B3C27EB14F8551713C67F4EC48482FE1235D40AE75386BF10B6A83706474F5211C00178D2C1C08D0EB8F2E3C7C37A6CF390BA090DB1D6EF0FD9EEE6395564A8B89F0DAF8FF26DC515F7C46ECE41F699042F4EE04FC0DCBA7B733BABF7F4F2425330FB5159D6477FB5BC7E946913BA962873B48F6865199301C6F2F448A20E43CEB8757A5407DCEDE3FA2779C98B083FFE82D4C2ADD9ADCD5FDED684E08E25788CC500BA7256C51D2546CD0B1E61A3BFC3A7A763DFFE83F5B06B56E1A883148AD17F94264AD404557017712DD83BD8F97008BBE61613E6518B125D9E3EF150A04B3196D0FFD130D4F681745566A2FA494B9955B0D02800C7D55FEF1C92936335E0C3BB50CF76C5B58DF3C12B0A777CF4F50024CDEDFCC89F379E189B094DACABCB686568FD736A4114CAC0EF22104FC3B7A80C83059956AAA025ACBF9677E47CB67E0E4DCD1E96276D1B160DE2E2592CE2FD9B3A802BEC04BA8B79E31633876181CA207D049903BB103901AAF2741D608C4A32CF3789B0BDA46755B5B8A4AB4EBCF2BD2159C7CA491EA195FBA3B81003F7F1B8C0A1974906A53048A7BF472A1C2F98A09BB9A3F3670E941A0E8679A3AE7126D30924FC59C738E71CD336C5833F3312BC1CB038B20CE255041899FCDC12C1C02CEE8F575E78621ECFD3DB772C2C5BEC1620BDEF887BEC472BA1AFF029223F6F35D885B84E2FF3FE89B72D29601EBC144C3FA32EDCE9F5858F7BC39AC176437C8A69C5216866617E687BFE61C3F49AA4D5E85392ACD96840015562A7E74640A121396DDF3C2E97BC25CFD2D29318FD4EA7613FCFAD027D73873DDCDA67BA2C2AEF0102A5B57DD1B0B2C9C4F72A2F4701388A2239F2BD69CC9B2AB2B14C681630F41900FB015957C3116BD842732AFEA106C70BF17F75D21E632A0A9C9A45BAF4A487B535CD6AC18253DDB7E5AF522140F79D267EAB69FFFBC2ABEC782CCFCE0D0A4FBDF3725C607EE9F40E1D811D6FBAC592341EE1F6F3A0F124D25B2B446E18050A319C670C43F0358E03283D0372894895A6A0480C6108A4C65480C4FE087312CCD2589030DEDCDCCACE40A2342478F3EC2D371C988D22749CD8DBD083D6A540EACEA7E8CFC7869CE28898AD93D8C3F9F8DE34400D96DD364FC0ADE56E69FA0D6F7C3F506BADD71A42F6F2B35A7270EDD574F2C5EB8AD67B8E32ECDF958F241600949D4E038438CC72E0309F5953C7C114B0ED7BEFB929B89ACEAD4AC7354F113A5DE25C9C08C667C384F

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KTKQLO+HelveticaNeue cguidfix
/F1.1/KTKQLO+HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
281 68.75 m
272 73.25 l
272 64.25 l
281 68.75 l
h
170.5 68.25 m
272.5 68.25 l
273 68.25 l
273 69.25 l
272.5 69.25 l
170.5 69.25 l
170 69.25 l
170 68.25 l
170.5 68.25 l
h
W
0 0 790 132 rc
165 78.25 m
286 78.25 l
286 59.25 l
165 59.25 l
h
f
Q
q
170 68.75 m
179 64.25 l
179 73.25 l
170 68.75 l
h
280.5 69.25 m
178.5 69.25 l
178 69.25 l
178 68.25 l
178.5 68.25 l
280.5 68.25 l
281 68.25 l
281 69.25 l
280.5 69.25 l
h
W
0 0 790 132 rc
165 78.25 m
286 78.25 l
286 59.25 l
165 59.25 l
h
f
Q
q
572 66.75 m
563 71.25 l
563 62.25 l
572 66.75 l
h
461.5 66.25 m
563.5 66.25 l
564 66.25 l
564 67.25 l
563.5 67.25 l
461.5 67.25 l
461 67.25 l
461 66.25 l
461.5 66.25 l
h
W
0 0 790 132 rc
456 76.25 m
577 76.25 l
577 57.25 l
456 57.25 l
h
f
Q
q
461 66.75 m
470 62.25 l
470 71.25 l
461 66.75 l
h
571.5 67.25 m
469.5 67.25 l
469 67.25 l
469 66.25 l
469.5 66.25 l
571.5 66.25 l
572 66.25 l
572 67.25 l
571.5 67.25 l
h
W
0 0 790 132 rc
456 76.25 m
577 76.25 l
577 57.25 l
456 57.25 l
h
f
Q
q
572 39.75 m
563 44.25 l
563 35.25 l
572 39.75 l
h
461.5 39.25 m
563.5 39.25 l
564 39.25 l
564 40.25 l
563.5 40.25 l
461.5 40.25 l
461 40.25 l
461 39.25 l
461.5 39.25 l
h
W
0 0 790 132 rc
456 49.25 m
577 49.25 l
577 30.25 l
456 30.25 l
h
f
Q
q
461 39.75 m
470 35.25 l
470 44.25 l
461 39.75 l
h
571.5 40.25 m
469.5 40.25 l
469 40.25 l
469 39.25 l
469.5 39.25 l
571.5 39.25 l
572 39.25 l
572 40.25 l
571.5 40.25 l
h
W
0 0 790 132 rc
456 49.25 m
577 49.25 l
577 30.25 l
456 30.25 l
h
f
Q
q
572 93.75 m
563 98.25 l
563 89.25 l
572 93.75 l
h
461.5 93.25 m
563.5 93.25 l
564 93.25 l
564 94.25 l
563.5 94.25 l
461.5 94.25 l
461 94.25 l
461 93.25 l
461.5 93.25 l
h
W
0 0 790 132 rc
456 103.25 m
577 103.25 l
577 84.25 l
456 84.25 l
h
f
Q
q
461 93.75 m
470 89.25 l
470 98.25 l
461 93.75 l
h
571.5 94.25 m
469.5 94.25 l
469 94.25 l
469 93.25 l
469.5 93.25 l
571.5 93.25 l
572 93.25 l
572 94.25 l
571.5 94.25 l
h
W
0 0 790 132 rc
456 103.25 m
577 103.25 l
577 84.25 l
456 84.25 l
h
f
Q
0.847 0.847 0.847 sc
q
85.5 6 m
132.16806 6 170 34.206062 170 69 c
170 103.79394 132.16806 132 85.5 132 c
38.83194 132 1 103.79394 1 69 c
1 34.206062 38.83194 6 85.5 6 c
h
W*
0 0 790 132 rc
-4 137 m
175 137 l
175 1 l
-4 1 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 790 132 rc
1 0 0 -1 1 132 cm
84.5 126 m
131.16806 126 169 97.793938 169 63 c
169 28.20606 131.16806 0 84.5 0 c
37.83194 0 0 28.20606 0 63 c
0 97.793938 37.83194 126 84.5 126 c
h
S
Q
0 0 0 sc
q
1 6 169 126 rc
1 0 0 -1 1 132 cm
/F1.1[ 24 0 0 -24 0 0]sf
44.228001 72 m
(!"#$%&)[ 16.008000 13.512000 13.584000 12.888000 13.440000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
260.5 146.5 m
481.5 146.5 l
481.5 -14.5 l
260.5 -14.5 l
h
289 125.5 m
453 125.5 l
457.14215 125.5 460.5 122.14214 460.5 118 c
460.5 14 l
460.5 9.8578644 457.14215 6.5 453 6.5 c
289 6.5 l
284.85785 6.5 281.5 9.8578644 281.5 14 c
281.5 118 l
281.5 122.14214 284.85785 125.5 289 125.5 c
h
289 126.5 m
284.30557 126.5 280.5 122.69442 280.5 118 c
280.5 14 l
280.5 9.3055792 284.30557 5.5 289 5.5 c
453 5.5 l
457.69443 5.5 461.5 9.3055792 461.5 14 c
461.5 118 l
461.5 122.69442 457.69443 126.5 453 126.5 c
289 126.5 l
h
W*
289 126 m
453 126 l
457.41827 126 461 122.41828 461 118 c
461 14 l
461 9.5817223 457.41827 6 453 6 c
289 6 l
284.58173 6 281 9.5817223 281 14 c
281 118 l
281 122.41828 284.58173 126 289 126 c
h
W*
0 0 790 132 rc
289 126 m
453 126 l
457.41827 126 461 122.41828 461 118 c
461 14 l
461 9.5817223 457.41827 6 453 6 c
289 6 l
284.58173 6 281 9.5817223 281 14 c
281 118 l
281 122.41828 284.58173 126 289 126 c
h
f
Q
2 w
0.59200001 0.59200001 0.59200001 sc
q
289 126 m
453 126 l
457.41827 126 461 122.41828 461 118 c
461 14 l
461 9.5817223 457.41827 6 453 6 c
289 6 l
284.58173 6 281 9.5817223 281 14 c
281 118 l
281 122.41828 284.58173 126 289 126 c
h
W*
0 0 790 132 rc
1 0 0 -1 281 126 cm
8 0 m
172 0 l
176.41827 0 180 3.581722 180 8 c
180 112 l
180 116.41828 176.41827 120 172 120 c
8 120 l
3.581722 120 0 116.41828 0 112 c
0 8 l
0 3.581722 3.581722 0 8 0 c
h
S
Q
0 0 0 sc
q
281 6 180 120 rc
1 0 0 -1 281 126 cm
/F1.1[ 24 0 0 -24 0 0]sf
18.108 69 m
('\(#"\)*$%#$)[ 17.088000 14.232000 13.584000 13.512000 13.776000 18.792000 12.888000 13.440000 13.584000 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
W*
0 0 790 132 rc
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
572 132 m
790 132 l
790 1 l
572 1 l
572 132 l
h
W*
0 0 790 132 rc
1 0 0 -1 572 132 cm
0 0 m
218 0 l
218 131 l
0 131 l
0 0 l
h
S
Q
0 0 0 sc
q
572 0 218 131 rc
1 0 0 -1 572 131 cm
/F1.1[ 24 0 0 -24 0 0]sf
59.02 74 m
(+,-.,/0)[ 18.216000 13.776000 17.328000 5.328000 13.776000 18.192000 0.000000 ] xS
ep
end
